// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ProyectoBaseNetCore;

#nullable disable

namespace VET_ANIMAL_API.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("Role", "SEG");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaim", "SEG");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaim", "SEG");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogin", "SEG");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRole", "SEG");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UsersToken", "SEG");
                });

            modelBuilder.Entity("ProyectoBaseNetCore.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<bool>("Bloqueo")
                        .HasColumnType("boolean");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("Users", "SEG");
                });

            modelBuilder.Entity("ProyectoBaseNetCore.Entities.Cliente", b =>
                {
                    b.Property<long>("IdCliente")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("IdCliente"));

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean");

                    b.Property<string>("Codigo")
                        .HasColumnType("text");

                    b.Property<string>("Correo")
                        .HasColumnType("text");

                    b.Property<string>("Direccion")
                        .HasMaxLength(350)
                        .HasColumnType("character varying(350)");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaRegistro")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Identificacion")
                        .HasColumnType("text");

                    b.Property<string>("IpEliminacion")
                        .HasMaxLength(350)
                        .HasColumnType("character varying(350)");

                    b.Property<string>("IpModificacion")
                        .HasMaxLength(350)
                        .HasColumnType("character varying(350)");

                    b.Property<string>("IpRegistro")
                        .HasMaxLength(350)
                        .HasColumnType("character varying(350)");

                    b.Property<string>("Nombres")
                        .HasColumnType("text");

                    b.Property<string>("Telefono")
                        .HasColumnType("text");

                    b.Property<string>("UsuarioEliminacion")
                        .HasMaxLength(350)
                        .HasColumnType("character varying(350)");

                    b.Property<string>("UsuarioModificacion")
                        .HasMaxLength(350)
                        .HasColumnType("character varying(350)");

                    b.Property<string>("UsuarioRegistro")
                        .HasMaxLength(350)
                        .HasColumnType("character varying(350)");

                    b.HasKey("IdCliente");

                    b.ToTable("Clientes", "CAT");
                });

            modelBuilder.Entity("ProyectoBaseNetCore.Entities.CodigosSecuencia", b =>
                {
                    b.Property<long>("IdCodigosSecuencia")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("IdCodigosSecuencia"));

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean");

                    b.Property<string>("Codigo")
                        .HasColumnType("text");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaRegistro")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("IpEliminacion")
                        .HasMaxLength(350)
                        .HasColumnType("character varying(350)");

                    b.Property<string>("IpModificacion")
                        .HasMaxLength(350)
                        .HasColumnType("character varying(350)");

                    b.Property<string>("IpRegistro")
                        .HasMaxLength(350)
                        .HasColumnType("character varying(350)");

                    b.Property<int>("UltimoNumero")
                        .HasColumnType("integer");

                    b.Property<string>("UsuarioEliminacion")
                        .HasMaxLength(350)
                        .HasColumnType("character varying(350)");

                    b.Property<string>("UsuarioModificacion")
                        .HasMaxLength(350)
                        .HasColumnType("character varying(350)");

                    b.Property<string>("UsuarioRegistro")
                        .HasMaxLength(350)
                        .HasColumnType("character varying(350)");

                    b.HasKey("IdCodigosSecuencia");

                    b.ToTable("Codigos", "CAT");
                });

            modelBuilder.Entity("ProyectoBaseNetCore.Entities.Enfermedad", b =>
                {
                    b.Property<long>("IdEnfermedad")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("IdEnfermedad"));

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean");

                    b.Property<string>("CodigoEnfermedad")
                        .HasColumnType("text");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaRegistro")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("IpEliminacion")
                        .HasMaxLength(350)
                        .HasColumnType("character varying(350)");

                    b.Property<string>("IpModificacion")
                        .HasMaxLength(350)
                        .HasColumnType("character varying(350)");

                    b.Property<string>("IpRegistro")
                        .HasMaxLength(350)
                        .HasColumnType("character varying(350)");

                    b.Property<string>("Nombre")
                        .HasColumnType("text");

                    b.Property<string>("UsuarioEliminacion")
                        .HasMaxLength(350)
                        .HasColumnType("character varying(350)");

                    b.Property<string>("UsuarioModificacion")
                        .HasMaxLength(350)
                        .HasColumnType("character varying(350)");

                    b.Property<string>("UsuarioRegistro")
                        .HasMaxLength(350)
                        .HasColumnType("character varying(350)");

                    b.HasKey("IdEnfermedad");

                    b.ToTable("Enfermedad", "CAT");
                });

            modelBuilder.Entity("ProyectoBaseNetCore.Entities.FichaDetalle", b =>
                {
                    b.Property<long>("IdDetalle")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("IdDetalle"));

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaRegistro")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("IdFicha")
                        .HasColumnType("bigint");

                    b.Property<long>("IdSintoma")
                        .HasColumnType("bigint");

                    b.Property<string>("IpEliminacion")
                        .HasMaxLength(350)
                        .HasColumnType("character varying(350)");

                    b.Property<string>("IpModificacion")
                        .HasMaxLength(350)
                        .HasColumnType("character varying(350)");

                    b.Property<string>("IpRegistro")
                        .HasMaxLength(350)
                        .HasColumnType("character varying(350)");

                    b.Property<string>("Observacion")
                        .HasColumnType("text");

                    b.Property<string>("UsuarioEliminacion")
                        .HasMaxLength(350)
                        .HasColumnType("character varying(350)");

                    b.Property<string>("UsuarioModificacion")
                        .HasMaxLength(350)
                        .HasColumnType("character varying(350)");

                    b.Property<string>("UsuarioRegistro")
                        .HasMaxLength(350)
                        .HasColumnType("character varying(350)");

                    b.HasKey("IdDetalle");

                    b.HasIndex("IdFicha");

                    b.HasIndex("IdSintoma");

                    b.ToTable("FichaDetalle", "DET");
                });

            modelBuilder.Entity("ProyectoBaseNetCore.Entities.FichaSintoma", b =>
                {
                    b.Property<long>("IdFicha")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("IdFicha"));

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean");

                    b.Property<string>("CodigoFicha")
                        .HasColumnType("text");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaRegistro")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("HistoriaClinicaIdHistoriaClinica")
                        .HasColumnType("bigint");

                    b.Property<string>("IpEliminacion")
                        .HasMaxLength(350)
                        .HasColumnType("character varying(350)");

                    b.Property<string>("IpModificacion")
                        .HasMaxLength(350)
                        .HasColumnType("character varying(350)");

                    b.Property<string>("IpRegistro")
                        .HasMaxLength(350)
                        .HasColumnType("character varying(350)");

                    b.Property<string>("UsuarioEliminacion")
                        .HasMaxLength(350)
                        .HasColumnType("character varying(350)");

                    b.Property<string>("UsuarioModificacion")
                        .HasMaxLength(350)
                        .HasColumnType("character varying(350)");

                    b.Property<string>("UsuarioRegistro")
                        .HasMaxLength(350)
                        .HasColumnType("character varying(350)");

                    b.HasKey("IdFicha");

                    b.HasIndex("HistoriaClinicaIdHistoriaClinica");

                    b.ToTable("FichaSintoma", "DET");
                });

            modelBuilder.Entity("ProyectoBaseNetCore.Entities.HistoriaClinica", b =>
                {
                    b.Property<long>("IdHistoriaClinica")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("IdHistoriaClinica"));

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean");

                    b.Property<string>("CodigoHistorial")
                        .HasColumnType("text");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaRegistro")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("IdMascotas")
                        .HasColumnType("bigint");

                    b.Property<string>("IpEliminacion")
                        .HasMaxLength(350)
                        .HasColumnType("character varying(350)");

                    b.Property<string>("IpModificacion")
                        .HasMaxLength(350)
                        .HasColumnType("character varying(350)");

                    b.Property<string>("IpRegistro")
                        .HasMaxLength(350)
                        .HasColumnType("character varying(350)");

                    b.Property<string>("UsuarioEliminacion")
                        .HasMaxLength(350)
                        .HasColumnType("character varying(350)");

                    b.Property<string>("UsuarioModificacion")
                        .HasMaxLength(350)
                        .HasColumnType("character varying(350)");

                    b.Property<string>("UsuarioRegistro")
                        .HasMaxLength(350)
                        .HasColumnType("character varying(350)");

                    b.HasKey("IdHistoriaClinica");

                    b.HasIndex("IdMascotas");

                    b.ToTable("HistoriaClinica", "DET");
                });

            modelBuilder.Entity("ProyectoBaseNetCore.Entities.Mascota", b =>
                {
                    b.Property<long>("IdMascota")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("IdMascota"));

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean");

                    b.Property<string>("Codigo")
                        .HasColumnType("text");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("FechaNacimiento")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaRegistro")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("IdCliente")
                        .HasColumnType("bigint");

                    b.Property<string>("IpEliminacion")
                        .HasMaxLength(350)
                        .HasColumnType("character varying(350)");

                    b.Property<string>("IpModificacion")
                        .HasMaxLength(350)
                        .HasColumnType("character varying(350)");

                    b.Property<string>("IpRegistro")
                        .HasMaxLength(350)
                        .HasColumnType("character varying(350)");

                    b.Property<string>("NombreMascota")
                        .HasColumnType("text");

                    b.Property<float?>("Peso")
                        .HasColumnType("real");

                    b.Property<string>("Raza")
                        .HasColumnType("text");

                    b.Property<string>("Sexo")
                        .HasColumnType("text");

                    b.Property<string>("UsuarioEliminacion")
                        .HasMaxLength(350)
                        .HasColumnType("character varying(350)");

                    b.Property<string>("UsuarioModificacion")
                        .HasMaxLength(350)
                        .HasColumnType("character varying(350)");

                    b.Property<string>("UsuarioRegistro")
                        .HasMaxLength(350)
                        .HasColumnType("character varying(350)");

                    b.HasKey("IdMascota");

                    b.HasIndex("IdCliente");

                    b.ToTable("Mascotas", "CAT");
                });

            modelBuilder.Entity("ProyectoBaseNetCore.Entities.MotivoConsulta", b =>
                {
                    b.Property<long>("IdMotivo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("IdMotivo"));

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean");

                    b.Property<string>("Destalle")
                        .HasColumnType("text");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaRegistro")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("IpEliminacion")
                        .HasMaxLength(350)
                        .HasColumnType("character varying(350)");

                    b.Property<string>("IpModificacion")
                        .HasMaxLength(350)
                        .HasColumnType("character varying(350)");

                    b.Property<string>("IpRegistro")
                        .HasMaxLength(350)
                        .HasColumnType("character varying(350)");

                    b.Property<string>("Nombre")
                        .HasColumnType("text");

                    b.Property<string>("UsuarioEliminacion")
                        .HasMaxLength(350)
                        .HasColumnType("character varying(350)");

                    b.Property<string>("UsuarioModificacion")
                        .HasMaxLength(350)
                        .HasColumnType("character varying(350)");

                    b.Property<string>("UsuarioRegistro")
                        .HasMaxLength(350)
                        .HasColumnType("character varying(350)");

                    b.HasKey("IdMotivo");

                    b.ToTable("MotivoConsulta", "CAT");
                });

            modelBuilder.Entity("ProyectoBaseNetCore.Entities.Resultado", b =>
                {
                    b.Property<long>("IdResultado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("IdResultado"));

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean");

                    b.Property<string>("Descripcion")
                        .HasColumnType("text");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaRegistro")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("IdEnfermedad")
                        .HasColumnType("bigint");

                    b.Property<long>("IdFicha")
                        .HasColumnType("bigint");

                    b.Property<string>("IpEliminacion")
                        .HasMaxLength(350)
                        .HasColumnType("character varying(350)");

                    b.Property<string>("IpModificacion")
                        .HasMaxLength(350)
                        .HasColumnType("character varying(350)");

                    b.Property<string>("IpRegistro")
                        .HasMaxLength(350)
                        .HasColumnType("character varying(350)");

                    b.Property<string>("UsuarioEliminacion")
                        .HasMaxLength(350)
                        .HasColumnType("character varying(350)");

                    b.Property<string>("UsuarioModificacion")
                        .HasMaxLength(350)
                        .HasColumnType("character varying(350)");

                    b.Property<string>("UsuarioRegistro")
                        .HasMaxLength(350)
                        .HasColumnType("character varying(350)");

                    b.HasKey("IdResultado");

                    b.HasIndex("IdEnfermedad");

                    b.HasIndex("IdFicha");

                    b.ToTable("Resultado", "DET");
                });

            modelBuilder.Entity("ProyectoBaseNetCore.Entities.Sintoma", b =>
                {
                    b.Property<long>("IdSintoma")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("IdSintoma"));

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean");

                    b.Property<string>("Descripcion")
                        .HasColumnType("text");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaRegistro")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("IpEliminacion")
                        .HasMaxLength(350)
                        .HasColumnType("character varying(350)");

                    b.Property<string>("IpModificacion")
                        .HasMaxLength(350)
                        .HasColumnType("character varying(350)");

                    b.Property<string>("IpRegistro")
                        .HasMaxLength(350)
                        .HasColumnType("character varying(350)");

                    b.Property<string>("Nombre")
                        .HasColumnType("text");

                    b.Property<string>("UsuarioEliminacion")
                        .HasMaxLength(350)
                        .HasColumnType("character varying(350)");

                    b.Property<string>("UsuarioModificacion")
                        .HasMaxLength(350)
                        .HasColumnType("character varying(350)");

                    b.Property<string>("UsuarioRegistro")
                        .HasMaxLength(350)
                        .HasColumnType("character varying(350)");

                    b.HasKey("IdSintoma");

                    b.ToTable("Sintomas", "CAT");
                });

            modelBuilder.Entity("ProyectoBaseNetCore.Entities.TipoEnfermedad", b =>
                {
                    b.Property<long>("IdTipoEnfermedad")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("IdTipoEnfermedad"));

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean");

                    b.Property<int>("ConteoDiagnosticoTipos")
                        .HasColumnType("integer");

                    b.Property<long?>("EnfermedadIdEnfermedad")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaRegistro")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("IdEnfermedad")
                        .HasColumnType("bigint");

                    b.Property<string>("IpEliminacion")
                        .HasMaxLength(350)
                        .HasColumnType("character varying(350)");

                    b.Property<string>("IpModificacion")
                        .HasMaxLength(350)
                        .HasColumnType("character varying(350)");

                    b.Property<string>("IpRegistro")
                        .HasMaxLength(350)
                        .HasColumnType("character varying(350)");

                    b.Property<string>("NombreTipoEnfermedad")
                        .HasColumnType("text");

                    b.Property<string>("UsuarioEliminacion")
                        .HasMaxLength(350)
                        .HasColumnType("character varying(350)");

                    b.Property<string>("UsuarioModificacion")
                        .HasMaxLength(350)
                        .HasColumnType("character varying(350)");

                    b.Property<string>("UsuarioRegistro")
                        .HasMaxLength(350)
                        .HasColumnType("character varying(350)");

                    b.HasKey("IdTipoEnfermedad");

                    b.HasIndex("EnfermedadIdEnfermedad");

                    b.ToTable("TipoEnfermedad", "CAT");
                });

            modelBuilder.Entity("VET_ANIMAL_API.Entities.FichaControl", b =>
                {
                    b.Property<long>("IdFichaControl")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("IdFichaControl"));

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean");

                    b.Property<string>("CodigoFichaControl")
                        .HasColumnType("text");

                    b.Property<DateTime?>("FechaEliminacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("FechaModificacion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FechaRegistro")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("IdHistoriaClinica")
                        .HasColumnType("bigint");

                    b.Property<long>("IdMotivo")
                        .HasColumnType("bigint");

                    b.Property<string>("IpEliminacion")
                        .HasMaxLength(350)
                        .HasColumnType("character varying(350)");

                    b.Property<string>("IpModificacion")
                        .HasMaxLength(350)
                        .HasColumnType("character varying(350)");

                    b.Property<string>("IpRegistro")
                        .HasMaxLength(350)
                        .HasColumnType("character varying(350)");

                    b.Property<string>("Observacion")
                        .HasColumnType("text");

                    b.Property<float>("Peso")
                        .HasColumnType("real");

                    b.Property<string>("UsuarioEliminacion")
                        .HasMaxLength(350)
                        .HasColumnType("character varying(350)");

                    b.Property<string>("UsuarioModificacion")
                        .HasMaxLength(350)
                        .HasColumnType("character varying(350)");

                    b.Property<string>("UsuarioRegistro")
                        .HasMaxLength(350)
                        .HasColumnType("character varying(350)");

                    b.HasKey("IdFichaControl");

                    b.HasIndex("IdHistoriaClinica");

                    b.HasIndex("IdMotivo");

                    b.ToTable("FichaControl", "DET");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ProyectoBaseNetCore.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ProyectoBaseNetCore.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProyectoBaseNetCore.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ProyectoBaseNetCore.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProyectoBaseNetCore.Entities.FichaDetalle", b =>
                {
                    b.HasOne("ProyectoBaseNetCore.Entities.FichaSintoma", "FichaSintoma")
                        .WithMany("FichaDetalles")
                        .HasForeignKey("IdFicha")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProyectoBaseNetCore.Entities.Sintoma", "Sintoma")
                        .WithMany("FichaDetalles")
                        .HasForeignKey("IdSintoma")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FichaSintoma");

                    b.Navigation("Sintoma");
                });

            modelBuilder.Entity("ProyectoBaseNetCore.Entities.FichaSintoma", b =>
                {
                    b.HasOne("ProyectoBaseNetCore.Entities.HistoriaClinica", null)
                        .WithMany("FichasSintoma")
                        .HasForeignKey("HistoriaClinicaIdHistoriaClinica");
                });

            modelBuilder.Entity("ProyectoBaseNetCore.Entities.HistoriaClinica", b =>
                {
                    b.HasOne("ProyectoBaseNetCore.Entities.Mascota", "Mascota")
                        .WithMany()
                        .HasForeignKey("IdMascotas")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mascota");
                });

            modelBuilder.Entity("ProyectoBaseNetCore.Entities.Mascota", b =>
                {
                    b.HasOne("ProyectoBaseNetCore.Entities.Cliente", "Cliente")
                        .WithMany("Mascotas")
                        .HasForeignKey("IdCliente")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("ProyectoBaseNetCore.Entities.Resultado", b =>
                {
                    b.HasOne("ProyectoBaseNetCore.Entities.Enfermedad", "Enfermedad")
                        .WithMany("Resultados")
                        .HasForeignKey("IdEnfermedad")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProyectoBaseNetCore.Entities.FichaSintoma", "FichaSintoma")
                        .WithMany()
                        .HasForeignKey("IdFicha")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Enfermedad");

                    b.Navigation("FichaSintoma");
                });

            modelBuilder.Entity("ProyectoBaseNetCore.Entities.TipoEnfermedad", b =>
                {
                    b.HasOne("ProyectoBaseNetCore.Entities.Enfermedad", "Enfermedad")
                        .WithMany()
                        .HasForeignKey("EnfermedadIdEnfermedad");

                    b.Navigation("Enfermedad");
                });

            modelBuilder.Entity("VET_ANIMAL_API.Entities.FichaControl", b =>
                {
                    b.HasOne("ProyectoBaseNetCore.Entities.HistoriaClinica", "HistoriaClinica")
                        .WithMany("FichaControl")
                        .HasForeignKey("IdHistoriaClinica")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProyectoBaseNetCore.Entities.MotivoConsulta", "MotivoConsulta")
                        .WithMany("FichasControl")
                        .HasForeignKey("IdMotivo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HistoriaClinica");

                    b.Navigation("MotivoConsulta");
                });

            modelBuilder.Entity("ProyectoBaseNetCore.Entities.Cliente", b =>
                {
                    b.Navigation("Mascotas");
                });

            modelBuilder.Entity("ProyectoBaseNetCore.Entities.Enfermedad", b =>
                {
                    b.Navigation("Resultados");
                });

            modelBuilder.Entity("ProyectoBaseNetCore.Entities.FichaSintoma", b =>
                {
                    b.Navigation("FichaDetalles");
                });

            modelBuilder.Entity("ProyectoBaseNetCore.Entities.HistoriaClinica", b =>
                {
                    b.Navigation("FichaControl");

                    b.Navigation("FichasSintoma");
                });

            modelBuilder.Entity("ProyectoBaseNetCore.Entities.MotivoConsulta", b =>
                {
                    b.Navigation("FichasControl");
                });

            modelBuilder.Entity("ProyectoBaseNetCore.Entities.Sintoma", b =>
                {
                    b.Navigation("FichaDetalles");
                });
#pragma warning restore 612, 618
        }
    }
}
